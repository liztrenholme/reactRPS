{"version":3,"sources":["components/rock/assets/rock.png","components/paper/assets/paper.png","components/scissors/assets/scissors.png","components/rock/index.js","components/paper/index.js","components/scissors/index.js","components/display/index.js","components/Input/index.js","config.js","components/chatBox/index.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Rock","handleSelect","display","player","choice","name","src","rockImg","alt","onClick","className","Paper","paperImg","Scissors","scissorsImg","Display","this","props","isTurn","winner","opponentChoice","style","border","borderColor","borderStyle","Component","Input","handleTextChange","value","onChange","placeholder","CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ChatBox","state","input","messagesEndRef","React","createRef","scrollToBottom","current","scrollTop","scrollHeight","database","firebase","chat","ref","chatDisc","Date","now","handleChatDisconnect","onDisconnect","set","time","ServerValue","TIMESTAMP","message","idNum","handleChatTextChange","e","setState","target","handleSendChat","length","push","chatData","Object","keys","sort","j","filter","k","map","i","key","color","window","config","Firebase","initializeApp","Main","error","showInstructions","nameChosen","currentPlayerTurn","currentPlayers","playerOneExists","playerTwoExists","getChatData","on","snapshot","val","playAgain","gameStart","getGameData","currentTurnRef","child","exists","numChildren","gameData","console","log","playerOneChoice","playerTwoChoice","currentTurn","playerRef","wins","losses","remove","handleShowMobileInstructions","saveName","handleSelectChoice","json","version","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b32fcc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rock.84b42fe0.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.294861f4.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.bff85220.png\";","import React from 'react';\nimport './rock.css';\nimport rockImg from './assets/rock.png';\nimport PropTypes from 'prop-types';\n\nconst Rock = ({ handleSelect, display, player, choice }) => {\n  const name = 'rock';\n  return display ? (\n    <div>\n      <img\n        src={rockImg}\n        alt={name}\n        onClick={() => handleSelect(name)}\n        className={`player${player} ${choice}-${player} rock-sketch`}  />\n    </div>\n  ) : null;\n};\n\nRock.propTypes = {\n  handleSelect: PropTypes.func,\n  display: PropTypes.bool,\n  player: PropTypes.number,\n  choice: PropTypes.string\n};\n\nexport default Rock;","import React from 'react';\nimport './paper.css';\nimport PropTypes from 'prop-types';\nimport paperImg from './assets/paper.png';\n\nconst Paper = ({ handleSelect, display, player, choice }) => {\n  const name = 'paper';\n  return display ? (\n    <div>\n      <img \n        src={paperImg} \n        alt={name}\n        onClick={() => handleSelect(name)}\n        className={`player${player} ${choice}-${player} paper-sketch`}  />\n    </div>\n  ) : null;\n};\n\nPaper.propTypes = {\n  handleSelect: PropTypes.func,\n  display: PropTypes.bool,\n  player: PropTypes.number,\n  choice: PropTypes.string\n};\n  \nexport default Paper;","import React from 'react';\nimport './scissors.css';\nimport scissorsImg from './assets/scissors.png';\nimport PropTypes from 'prop-types';\n\nconst Scissors = ({ handleSelect, display, player, choice }) => {\n  const name = 'scissors';\n  return display ? (\n    <div>\n      <img \n        src={scissorsImg} \n        alt={name}\n        onClick={() => handleSelect(name)}\n        className={`player${player} ${choice}-${player} sketch`} />\n    </div>\n  ) : null;\n};\n\nScissors.propTypes = {\n  handleSelect: PropTypes.func,\n  display: PropTypes.bool,\n  player: PropTypes.number,\n  choice: PropTypes.string\n};\n  \nexport default Scissors;","/* eslint-disable no-console */\nimport React, { Component } from 'react';\nimport './display.css';\nimport PropTypes from 'prop-types';\nimport Rock from '../rock';\nimport Paper from '../paper';\nimport Scissors from '../scissors';\n\nclass Display extends Component {\n  render() {\n    const { player, isTurn, handleSelect, choice, winner, opponentChoice } = this.props;\n    return (\n      <div className='display' style={isTurn ? {border: '3px', borderColor: 'blue', borderStyle: 'solid'} \n        : {}}>\n        <Rock \n          display={(!winner && isTurn) || (winner && choice === 'rock') || (winner && opponentChoice === 'rock')}\n          player={player} \n          handleSelect={handleSelect}\n          choice={choice}\n        />\n        <Paper \n          display={(!winner && isTurn) || (winner && choice === 'paper') || (winner && opponentChoice === 'paper')} \n          player={player} \n          handleSelect={handleSelect}\n          choice={choice}\n        />\n        <Scissors \n          display={(!winner && isTurn) || (winner && choice === 'scissors') || (winner && opponentChoice === 'scissors')} \n          player={player} \n          handleSelect={handleSelect}\n          choice={choice}\n        />\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  player: PropTypes.number,\n  winner: PropTypes.string,\n  isTurn: PropTypes.bool,\n  handleSelect: PropTypes.func,\n  choice: PropTypes.string,\n  opponentChoice: PropTypes.string\n};\n\nexport default Display;","import React, { Component } from 'react';\nimport './input.css';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const { name, handleTextChange } = this.props;\n    return (\n      <div className=\"input\">\n        <input \n          value={name} \n          onChange={handleTextChange}\n          placeholder='Enter your name to play!' />\n      </div>\n    );\n  }\n}\n\nInput.propTypes = {\n  name: PropTypes.string,\n  handleTextChange: PropTypes.func\n};\n  \n\nexport default Input;","const CONFIG = {\n  apiKey: 'AIzaSyCmK6VgVTtzZ5ZDPOkGssOJLgMrK1mAdjI',\n  authDomain: 'rock-paper-scissors-5c265.firebaseapp.com',\n  databaseURL: 'https://rock-paper-scissors-5c265.firebaseio.com',\n  projectId: 'rock-paper-scissors-5c265',\n  storageBucket: 'rock-paper-scissors-5c265.appspot.com',\n  messagingSenderId: '146335845104'\n};\n  \nexport default CONFIG;","/* eslint-disable no-console */\nimport React, { Component } from 'react';\nimport './chatBox.css';\nimport PropTypes from 'prop-types';\n\nclass ChatBox extends Component {\n  state = {\n    input: ''\n  }\n  messagesEndRef = React.createRef()\n\n  componentDidMount () {\n    this.scrollToBottom();\n  }\n  componentDidUpdate () {\n    this.scrollToBottom();\n  }\n  scrollToBottom = () => {\n    this.messagesEndRef.current.scrollTop = this.messagesEndRef.current.scrollHeight;\n  }\n\n  database = this.props.firebase.database();\n  chat = this.database.ref('/chat');\n\n  chatDisc = this.database.ref('/chat/' + Date.now());\n\n  handleChatDisconnect = () =>  {\n    this.chatDisc.onDisconnect().set({\n      name: this.props.name,\n      time:  this.props.firebase.database.ServerValue.TIMESTAMP,\n      message: 'has disconnected.',\n      idNum: this.props.player\n    });\n  }\n\n  handleChatTextChange = (e) => this.setState({input: e.target.value})\n  handleSendChat = () => {\n    if (this.props.name && this.state.input.length) {\n      this.chat.push({\n        name: this.props.name,\n        time: this.props.firebase.database.ServerValue.TIMESTAMP,\n        message: this.state.input,\n        idNum: this.props.player\n      });\n      this.setState({input: ''});\n    }\n  }\n\n  // Update chat on screen when new message detected - ordered by 'time' value\n  \n  // .on(\"child_added\", function (snapshot) {\n    \n  //   // If idNum is 0, then its a disconnect message and displays accordingly\n  //   // If not - its a user chat message\n  //   if (snapshot.val().idNum === 0) {\n  //       $(\"#chat-space\").append(\"<p class=player\" + snapshot.val().idNum + \"><span>\" +\n  //           snapshot.val().name + \"</span>: \" + snapshot.val().message + \"</p>\");\n  //   } else {\n  //       $(\"#chat-space\").append(\"<p class=player\" + snapshot.val().idNum + \"><span>\" +\n  //           snapshot.val().name + \"</span>: \" + snapshot.val().message + \"</p>\");\n  //   }\n\n  //   // Keeps div scrolled to bottom on each update.\n  //   $(\"#chat-space\").scrollTop($(\"#chat-space\")[0].scrollHeight);\n  // });\n\n  render() {\n    const { chatData } = this.props;\n    return (\n      <div className='chat-box'>\n        <div className='message-display-box' ref={this.messagesEndRef}>\n          {chatData && Object.keys(chatData) ? Object.keys(chatData).sort(j => chatData[j].time)\n            .filter(k => chatData[k].message !== 'has disconnected.')\n            .map(i => chatData[i].idNum === 1 ? <div className='right-bubble' key={i}><p className='message-bubble message-bubble-right'>{chatData[i].message}</p> <span>{chatData[i].name}</span></div> \n              : <div className='left-bubble' key={i}><span>{chatData[i].name}</span> <p className='message-bubble message-bubble-left'>{chatData[i].message}</p></div>) : null}\n        </div>\n        {this.props.name ? \n          <input \n            onChange={this.handleChatTextChange} \n            value={this.state.input} /> \n          : <p style={{color: 'darkred'}}>Enter your name above to start chatting.</p>}\n        {this.props.name \n          ? <button className='saveBtn' onClick={this.handleSendChat}>Send</button> \n          : null}\n      </div>\n    );\n  }\n}\n\nChatBox.propTypes = {\n  player: PropTypes.string,\n  name: PropTypes.string,\n  chatData: PropTypes.object,\n  firebase: PropTypes.object\n};\n\nexport default ChatBox;","/* eslint-disable no-console */\n\n// 1. call to db to check for players\n// 2. if no players, assign to player one, if one player, assign to player two, otherwise say full\n// 3. if two players present, first turn starts\n// 4. player 1 selects and call is sent to db, second turn activated\n\n\nimport React, { Component } from 'react';\nimport './main.css';\nimport Display from '../display/index';\nimport Input from '../Input/index';\n// import InfoIconCircle from './assets/infoicon.png';\nimport json from '../../../package.json';\nimport Firebase from 'firebase';\nimport config from '../../config';\nimport ChatBox from '../chatBox';\n\nwindow.config = config;\n\nif (window && window.config) {\n  Firebase.initializeApp(window.config);\n}\n\nclass Main extends Component {\nstate = {\n  name: '',\n  player: null,\n  error: '',\n  showInstructions: false,\n  nameChosen: false,\n  choice: '',\n  currentPlayerTurn: null,\n  currentPlayers: 0,\n  chatData: {},\n  playerOneExists: false,\n  playerTwoExists: false,\n  winner: null,\n  opponentChoice: null\n}\n\ngetChatData = () => {\n  let ref = Firebase.database().ref('/chat');\n  ref.on('value', snapshot => {\n    const chatData = snapshot.val();\n    this.setState({chatData});\n  });\n}\n\nplayAgain = () => {\n  this.setState({\n    choice: '',\n    currentPlayerTurn: null,\n    currentPlayers: 0,\n    chatData: {},\n    playerOneExists: false,\n    playerTwoExists: false,\n    winner: null,\n    opponentChoice: null\n  });\n  this.gameStart();\n}\n\ngetGameData = () => {\n  let ref = Firebase.database().ref('/game/players');\n  let playerOneExists;\n  let playerTwoExists;\n  let currentPlayerTurn;\n  let currentPlayers;\n  const currentTurnRef = Firebase.database().ref('turn');\n  ref.on('value', snapshot => {\n    playerOneExists = snapshot.child('1').exists();\n    playerTwoExists = snapshot.child('2').exists();\n    \n    this.setState({playerOneExists, playerTwoExists});\n  });\n  currentTurnRef.on('value', snapshot => {\n    currentPlayerTurn = snapshot.val();\n    this.setState({currentPlayerTurn});\n  });\n  const playerStatus = Firebase.database().ref('players');\n  playerStatus.on('value', snapshot => {\n    currentPlayers = snapshot.numChildren();\n    this.setState({currentPlayers});\n  });\n}\n\ngameStart = () => {\n  const currentTurnRef = Firebase.database().ref('turn');\n  const chatDisc = Firebase.database().ref('/chat/' + Date.now());\n  // For adding disconnects to the chat with a unique id (the date/time the user entered the game)\n  // Needed because Firebase's '.push()' creates its unique keys client side,\n  // so you can't \".push()\" in a \".onDisconnect\"\n  // var chatDataDisc = database.ref(\"/chat/\" + Date.now());\n\n  // Checks for current players, if theres a player one connected, then the user becomes player 2.\n  // If there is no player one, then the user becomes player 1\n  let ref = Firebase.database().ref('players');\n  let playerOneExists;\n  let playerTwoExists;\n  let {winner, opponentChoice, player} = this.state;\n  ref.on('value', snapshot => {\n    const gameData = snapshot.val();\n    console.log('what is coming back for gamedata??', gameData);\n    playerOneExists = snapshot.child(1).exists();\n    playerTwoExists = snapshot.child(2).exists();\n\n    if (gameData && gameData[1] && gameData[1].choice && gameData[2] && gameData[2].choice) {\n      const playerOneChoice = gameData[1].choice;\n      const playerTwoChoice = gameData[2].choice;\n      console.log('CHOICES', playerOneChoice, playerTwoChoice);\n      if (playerOneChoice === 'paper' && playerTwoChoice === 'paper') {\n        winner = 'tie';\n      }\n      if (playerOneChoice === 'rock' && playerTwoChoice === 'rock') {\n        winner = 'tie';\n      }\n      if (playerOneChoice === 'scissors' && playerTwoChoice === 'scissors') {\n        winner = 'tie';\n      }\n      if (playerOneChoice === 'paper' && playerTwoChoice === 'rock') {\n        winner = gameData[1].name;\n      }\n      if (playerOneChoice === 'paper' && playerTwoChoice === 'scissors') {\n        winner = gameData[2].name;\n      }\n      if (playerOneChoice === 'rock' && playerTwoChoice === 'paper') {\n        winner = gameData[2].name;\n      }\n      if (playerOneChoice === 'rock' && playerTwoChoice === 'scissors') {\n        winner = gameData[1].name;\n      }\n      if (playerOneChoice === 'scissors' && playerTwoChoice === 'rock') {\n        winner = gameData[2].name;\n      }\n      if (playerOneChoice === 'scissors' && playerTwoChoice === 'paper') {\n        winner = gameData[1].name;\n      }\n      player === 1 ? opponentChoice = gameData[2].choice : gameData[1].choice;\n    }\n    \n    this.setState({playerOneExists, playerTwoExists, winner, opponentChoice});\n  });\n  console.log('CURRENT PLAYERS', this.state.currentPlayers, playerOneExists, playerTwoExists);\n  if (this.state.currentPlayers < 2) {\n    let {player} = this.state;\n    if (playerOneExists && !winner) {\n      player = 2;\n      currentTurnRef.set(1);\n      this.setState({currentTurn: 1});\n    }\n    else {\n      player = 1;\n    }\n\n    // Creates key based on assigned player number\n    const playerRef = Firebase.database().ref('/players/' + player);\n    // Creates player object. 'choice' is unnecessary here, but I left it in to be as complete as possible\n    playerRef.set({\n      name: this.state.name,\n      wins: 0,\n      losses: 0,\n      choice: null\n    });\n\n    // On disconnect remove this user's player object\n    playerRef.onDisconnect().remove();\n\n    // If a user disconnects, set the current turn to 'null' so the game does not continue\n    currentTurnRef.onDisconnect().remove();\n\n    // Send disconnect message to chat with Firebase server generated timestamp and id of '0' to denote system message\n    chatDisc.onDisconnect().set({\n      name: this.state.name,\n      time: Firebase.database.ServerValue.TIMESTAMP,\n      message: 'has disconnected.',\n      idNum: 0\n    });\n\n    this.setState({player});\n  }\n  else {\n    if (winner) {\n      this.setState({error: `The winner is ${winner}!`});\n    } else {\n    // If current players is \"2\", will not allow the player to join\n      this.setState({error: 'Sorry, Game Full! Try Again Later!'});\n    }\n  }\n}\n\ncomponentDidMount() {\n  this.getChatData();\n  this.getGameData();\n  // this.gameStart();\n}\n\nhandleShowMobileInstructions = () => {\n  this.state.showInstructions \n    ? this.setState({showInstructions: false}) \n    : this.setState({showInstructions: true});\n}\n\nhandleTextChange = (e) => {\n  const name = e.target.value;\n  this.setState({name});\n}\n\nsaveName = () => {\n  // call to db to save name goes here\n  this.setState({nameChosen: true});\n  this.gameStart();\n  // this.setPlayer();\n}\n\nhandleSelectChoice = (choice) => {\n  console.log('choice is', choice);\n  // const chosen = choice.split('1')[1] || choice.split('2')[1];\n  this.setState({choice});\n  const {name, player} = this.state;\n  const playerRef = Firebase.database().ref('/players/' + player);\n  const currentTurnRef = Firebase.database().ref('turn');\n  playerRef.set({\n    name: name,\n    wins: 0,\n    losses: 0,\n    choice: choice\n  });\n  this.state.currentPlayerTurn === 1 ? currentTurnRef.set(2) : currentTurnRef.set(1);\n  this.state.currentPlayerTurn === 1 ? this.setState({currentPlayerTurn: 2}) : this.setState({currentPlayerTurn: 1});\n}\n\nrender() {\n  const { \n    winner, \n    name, \n    error, \n    currentPlayerTurn,\n    nameChosen, \n    choice,\n    player, \n    chatData, \n    playerOneExists, \n    playerTwoExists, \n    currentPlayers,\n    opponentChoice\n  } = this.state;\n  console.log('state:::', this.state);\n  return (\n    <div className=\"main\">\n      <div className='main-container'>\n        <h1 className='header'>Rock, Paper, Scissors</h1>\n        {/* <div className='infoIcon'>\n          <img \n            src={InfoIconCircle} \n            onClick={this.handleShowMobileInstructions}\n            width='20px'\n            height='20px'\n            alt='info-icon' />\n        </div> */}\n        <div className='inputWithSave'>\n          {nameChosen && player ? \n            (<h1 className='name-display'>Hi {name}, you are player {player}!  {currentPlayers < 2 ? 'Waiting for player two to join...' : null} </h1>)\n            : (<div className='inputWithSave'>\n              <Input \n                name={name}\n                handleTextChange={this.handleTextChange}\n              />\n              {name ?\n                <button \n                  className='saveBtn' \n                  onClick={this.saveName}>\n                  Add my name!\n                </button> : null}\n            </div>)}\n        </div>\n        {!winner && playerOneExists && playerTwoExists ? <div>\n          {currentPlayerTurn === player ? <h3 style={{color: 'darkblue'}}>Your turn!</h3> \n            : <h3 style={{color: 'darkblue'}}>Waiting for opponent...</h3>}\n        </div> : null}\n        <div>\n          <h3 style={{color: 'darkRed'}}>{error}</h3>\n        </div>\n        {winner ? <div>\n          <h1 style={{color: 'darkRed'}}>The winner is {winner}!</h1>\n        </div> : null}\n        {!winner && playerOneExists && playerTwoExists ? <div className='gameboard'>\n          <div className='left-side'>\n            <Display \n              winner={winner}\n              player={1} \n              isTurn={!winner && currentPlayerTurn === 1 && player === 1} \n              handleSelect={this.handleSelectChoice}\n              choice={choice}\n              opponentChoice={player === 1 && opponentChoice ? opponentChoice : null} />\n          </div>\n          <div className='right-side'>\n            <Display \n              winner={winner}\n              player={2} \n              isTurn={!winner && currentPlayerTurn === 2 && player === 2} \n              handleSelect={this.handleSelectChoice}\n              choice={choice}\n              opponentChoice={player === 2 && opponentChoice ? opponentChoice : null} />\n          </div> \n        </div> : null}\n        {winner ?\n          <button \n            className='saveBtn' \n            onClick={this.playAgain}>\n                  Play again?\n          </button> : null}\n        <div>\n          <ChatBox\n            player={player}\n            name={name}\n            chatData={chatData}\n            firebase={Firebase} />\n        </div>\n      </div>\n      <h3>Version: {json.version}</h3>\n    </div>\n  );\n}\n}\n\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/main/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}