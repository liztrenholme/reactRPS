{"version":3,"sources":["components/rock/assets/rock.png","components/paper/assets/paper.png","components/scissors/assets/scissors.png","components/rock/index.js","components/paper/index.js","components/scissors/index.js","components/display/index.js","components/Input/index.js","config.js","components/chatBox/index.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Rock","handleSelect","display","player","choice","small","name","style","height","src","rockImg","alt","onClick","className","Paper","paperImg","Scissors","scissorsImg","Display","this","props","isTurn","winner","opponentChoice","border","borderColor","borderStyle","opacity","Component","Input","handleTextChange","value","onChange","placeholder","CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ChatBox","state","input","messagesEndRef","React","createRef","scrollToBottom","current","scrollTop","scrollHeight","database","firebase","chat","ref","chatDisc","Date","now","handleChatDisconnect","onDisconnect","set","time","ServerValue","TIMESTAMP","message","idNum","handleChatTextChange","e","setState","target","handleSendChat","length","push","chatData","Object","keys","sort","j","filter","k","map","i","key","color","window","config","Firebase","initializeApp","Main","error","showInstructions","nameChosen","currentPlayerTurn","currentPlayers","playerOneExists","playerTwoExists","opponentName","wins","losses","getChatData","on","snapshot","val","playAgain","thisPlayer","otherPlayer","gameData","console","log","opponentRef","refresh","location","reload","getGameData","currentTurnRef","child","exists","numChildren","gameStart","playerOneChoice","playerTwoChoice","currentTurn","playerRef","remove","handleShowMobileInstructions","saveName","handleSelectChoice","json","version","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1864b371.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rock.84b42fe0.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.294861f4.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.bff85220.png\";","import React from 'react';\nimport './rock.css';\nimport rockImg from './assets/rock.png';\nimport PropTypes from 'prop-types';\n\nconst Rock = ({ handleSelect, display, player, choice, small }) => {\n  const name = 'rock';\n  return display ? (\n    <div>\n      <img\n        style={small ? {height: '5em'} : {}}\n        src={rockImg}\n        alt={name}\n        onClick={handleSelect ? () => handleSelect(name) : null}\n        className={`player${player} ${choice}-${player} rock-sketch`}  />\n    </div>\n  ) : null;\n};\n\nRock.propTypes = {\n  handleSelect: PropTypes.func,\n  display: PropTypes.bool,\n  player: PropTypes.number,\n  choice: PropTypes.string,\n  small: PropTypes.bool\n};\n\nexport default Rock;","import React from 'react';\nimport './paper.css';\nimport PropTypes from 'prop-types';\nimport paperImg from './assets/paper.png';\n\nconst Paper = ({ handleSelect, display, player, choice, small }) => {\n  const name = 'paper';\n  return display ? (\n    <div>\n      <img\n        style={small ? {height: '5em'} : {}}\n        src={paperImg} \n        alt={name}\n        onClick={handleSelect ? () => handleSelect(name) : null}\n        className={`player${player} ${choice}-${player} paper-sketch`}  />\n    </div>\n  ) : null;\n};\n\nPaper.propTypes = {\n  handleSelect: PropTypes.func,\n  display: PropTypes.bool,\n  player: PropTypes.number,\n  choice: PropTypes.string,\n  small: PropTypes.bool\n};\n  \nexport default Paper;","import React from 'react';\nimport './scissors.css';\nimport scissorsImg from './assets/scissors.png';\nimport PropTypes from 'prop-types';\n\nconst Scissors = ({ handleSelect, display, player, choice, small }) => {\n  const name = 'scissors';\n  return display ? (\n    <div>\n      <img \n        style={small ? {height: '5em'} : {}}\n        src={scissorsImg} \n        alt={name}\n        onClick={handleSelect ? () => handleSelect(name) : null}\n        className={`player${player} ${choice}-${player} sketch`} />\n    </div>\n  ) : null;\n};\n\nScissors.propTypes = {\n  handleSelect: PropTypes.func,\n  display: PropTypes.bool,\n  player: PropTypes.number,\n  choice: PropTypes.string,\n  small: PropTypes.bool\n};\n  \nexport default Scissors;","/* eslint-disable no-console */\nimport React, { Component } from 'react';\nimport './display.css';\nimport PropTypes from 'prop-types';\nimport Rock from '../rock';\nimport Paper from '../paper';\nimport Scissors from '../scissors';\n\nclass Display extends Component {\n  render() {\n    const { player, isTurn, handleSelect, choice, winner, opponentChoice } = this.props;\n    return isTurn ? (\n      <div className='display' style={isTurn ? {border: '3px', borderColor: 'blue', borderStyle: 'solid'} \n        : {}}>\n        <Rock \n          display={(!winner && isTurn) || (winner && choice === 'rock') || (winner && opponentChoice === 'rock')}\n          player={player} \n          handleSelect={handleSelect}\n          choice={choice}\n        />\n        <Paper \n          display={(!winner && isTurn) || (winner && choice === 'paper') || (winner && opponentChoice === 'paper')} \n          player={player} \n          handleSelect={handleSelect}\n          choice={choice}\n        />\n        <Scissors \n          display={(!winner && isTurn) || (winner && choice === 'scissors') || (winner && opponentChoice === 'scissors')} \n          player={player} \n          handleSelect={handleSelect}\n          choice={choice}\n        />\n      </div>\n    ) : (\n      <div className='not-turn' style={{opacity: '0.5'}}>\n        <Rock \n          display\n          player={player} \n          choice={choice}\n        />\n        <Paper \n          display\n          player={player} \n          choice={choice}\n        />\n        <Scissors \n          display\n          player={player} \n          choice={choice}\n        />\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  player: PropTypes.number,\n  winner: PropTypes.string,\n  isTurn: PropTypes.bool,\n  handleSelect: PropTypes.func,\n  choice: PropTypes.string,\n  opponentChoice: PropTypes.string\n};\n\nexport default Display;","import React, { Component } from 'react';\nimport './input.css';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const { name, handleTextChange } = this.props;\n    return (\n      <div className=\"input\">\n        <input \n          value={name} \n          onChange={handleTextChange}\n          placeholder='Enter your name to play!' />\n      </div>\n    );\n  }\n}\n\nInput.propTypes = {\n  name: PropTypes.string,\n  handleTextChange: PropTypes.func\n};\n  \n\nexport default Input;","const CONFIG = {\n  apiKey: 'AIzaSyCmK6VgVTtzZ5ZDPOkGssOJLgMrK1mAdjI',\n  authDomain: 'rock-paper-scissors-5c265.firebaseapp.com',\n  databaseURL: 'https://rock-paper-scissors-5c265.firebaseio.com',\n  projectId: 'rock-paper-scissors-5c265',\n  storageBucket: 'rock-paper-scissors-5c265.appspot.com',\n  messagingSenderId: '146335845104'\n};\n  \nexport default CONFIG;","/* eslint-disable no-console */\nimport React, { Component } from 'react';\nimport './chatBox.css';\nimport PropTypes from 'prop-types';\n\nclass ChatBox extends Component {\n  state = {\n    input: ''\n  }\n  messagesEndRef = React.createRef()\n\n  componentDidMount () {\n    this.scrollToBottom();\n  }\n  componentDidUpdate () {\n    this.scrollToBottom();\n  }\n  scrollToBottom = () => {\n    this.messagesEndRef.current.scrollTop = this.messagesEndRef.current.scrollHeight;\n  }\n\n  database = this.props.firebase.database();\n  chat = this.database.ref('/chat');\n\n  chatDisc = this.database.ref('/chat/' + Date.now());\n\n  handleChatDisconnect = () =>  {\n    this.chatDisc.onDisconnect().set({\n      name: this.props.name,\n      time:  this.props.firebase.database.ServerValue.TIMESTAMP,\n      message: 'has disconnected.',\n      idNum: this.props.player\n    });\n  }\n\n  handleChatTextChange = (e) => this.setState({input: e.target.value})\n  handleSendChat = () => {\n    if (this.props.name && this.state.input.length) {\n      this.chat.push({\n        name: this.props.name,\n        time: this.props.firebase.database.ServerValue.TIMESTAMP,\n        message: this.state.input,\n        idNum: this.props.player\n      });\n      this.setState({input: ''});\n    }\n  }\n\n  // Update chat on screen when new message detected - ordered by 'time' value\n  \n  // .on(\"child_added\", function (snapshot) {\n    \n  //   // If idNum is 0, then its a disconnect message and displays accordingly\n  //   // If not - its a user chat message\n  //   if (snapshot.val().idNum === 0) {\n  //       $(\"#chat-space\").append(\"<p class=player\" + snapshot.val().idNum + \"><span>\" +\n  //           snapshot.val().name + \"</span>: \" + snapshot.val().message + \"</p>\");\n  //   } else {\n  //       $(\"#chat-space\").append(\"<p class=player\" + snapshot.val().idNum + \"><span>\" +\n  //           snapshot.val().name + \"</span>: \" + snapshot.val().message + \"</p>\");\n  //   }\n\n  //   // Keeps div scrolled to bottom on each update.\n  //   $(\"#chat-space\").scrollTop($(\"#chat-space\")[0].scrollHeight);\n  // });\n\n  render() {\n    const { chatData } = this.props;\n    return (\n      <div className='chat-box'>\n        <div className='message-display-box' ref={this.messagesEndRef}>\n          {chatData && Object.keys(chatData) ? Object.keys(chatData).sort(j => chatData[j].time)\n            .filter(k => chatData[k].message !== 'has disconnected.')\n            .map(i => chatData[i].idNum === 1 ? <div className='right-bubble' key={i}><p className='message-bubble message-bubble-right'>{chatData[i].message}</p> <span>{chatData[i].name}</span></div> \n              : <div className='left-bubble' key={i}><span>{chatData[i].name}</span> <p className='message-bubble message-bubble-left'>{chatData[i].message}</p></div>) : null}\n        </div>\n        {this.props.name ? \n          <input \n            onChange={this.handleChatTextChange} \n            value={this.state.input} /> \n          : <p style={{color: 'darkred'}}>Enter your name above to start chatting.</p>}\n        {this.props.name \n          ? <button className='saveBtn' onClick={this.handleSendChat}>Send</button> \n          : null}\n      </div>\n    );\n  }\n}\n\nChatBox.propTypes = {\n  player: PropTypes.number,\n  name: PropTypes.string,\n  chatData: PropTypes.object,\n  firebase: PropTypes.object\n};\n\nexport default ChatBox;","/* eslint-disable no-console */\n\n// 1. call to db to check for players\n// 2. if no players, assign to player one, if one player, assign to player two, otherwise say full\n// 3. if two players present, first turn starts\n// 4. player 1 selects and call is sent to db, second turn activated\n\n\nimport React, { Component } from 'react';\nimport './main.css';\nimport Display from '../display/index';\nimport Input from '../Input/index';\n// import InfoIconCircle from './assets/infoicon.png';\nimport json from '../../../package.json';\nimport Firebase from 'firebase';\nimport config from '../../config';\nimport ChatBox from '../chatBox';\nimport Scissors from '../scissors';\nimport Paper from '../paper';\nimport Rock from '../rock';\n\nwindow.config = config;\n\nif (window && window.config) {\n  Firebase.initializeApp(window.config);\n}\n\nclass Main extends Component {\nstate = {\n  name: '',\n  player: null,\n  error: '',\n  showInstructions: false,\n  nameChosen: false,\n  choice: '',\n  currentPlayerTurn: null,\n  currentPlayers: 0,\n  chatData: {},\n  playerOneExists: false,\n  playerTwoExists: false,\n  winner: null,\n  opponentChoice: null,\n  opponentName: '',\n  wins: 0,\n  losses: 0\n}\n\ngetChatData = () => {\n  let ref = Firebase.database().ref('/chat');\n  ref.on('value', snapshot => {\n    const chatData = snapshot.val();\n    this.setState({chatData});\n  });\n}\n\nplayAgain = () => {\n\n  let ref = Firebase.database().ref('players');\n  let thisPlayer;\n  let otherPlayer;\n\n  ref.on('value', snapshot => {\n    const gameData = snapshot.val();\n    console.log('gameData in playAgain...', gameData);\n    if (gameData && gameData[1] && gameData[1].name && gameData[1].name === this.state.name) {\n      thisPlayer = 1;\n      otherPlayer = 2;\n    } else {\n      thisPlayer = 2;\n      otherPlayer = 1;\n    }\n    \n    const playerRef = Firebase.database().ref('/players/' + thisPlayer);\n    playerRef.set({\n      name: this.state.name,\n      wins: this.state.wins,\n      losses: this.state.losses,\n      choice: ''\n    });\n    const opponentRef = Firebase.database().ref('/players/' + otherPlayer);\n    if (gameData && gameData[otherPlayer]) {\n      opponentRef.set({\n        name: this.state.opponentName,\n        wins: gameData[otherPlayer].wins,\n        losses: gameData[otherPlayer].losses,\n        choice: ''\n      });\n    }\n  });\n  this.setState({choice: '', opponentChoice: '', winner: null});\n}\n\nrefresh = () => {\n  // not the best, but temporary because of buggy playAgain\n  window.location.reload();\n}\n\ngetGameData = () => {\n  let ref = Firebase.database().ref('/game/players');\n  let playerOneExists;\n  let playerTwoExists;\n  let currentPlayerTurn;\n  let currentPlayers;\n  const currentTurnRef = Firebase.database().ref('turn');\n  ref.on('value', snapshot => {\n    playerOneExists = snapshot.child('1').exists();\n    playerTwoExists = snapshot.child('2').exists();\n    \n    this.setState({playerOneExists, playerTwoExists});\n  });\n  currentTurnRef.on('value', snapshot => {\n    currentPlayerTurn = snapshot.val();\n    this.setState({currentPlayerTurn});\n  });\n  const playerStatus = Firebase.database().ref('players');\n  playerStatus.on('value', snapshot => {\n    currentPlayers = snapshot.numChildren();\n    this.setState({currentPlayers});\n  });\n}\n\ngameStart = () => {\n  const currentTurnRef = Firebase.database().ref('turn');\n  const chatDisc = Firebase.database().ref('/chat/' + Date.now());\n  // For adding disconnects to the chat with a unique id (the date/time the user entered the game)\n  // Needed because Firebase's '.push()' creates its unique keys client side,\n  // so you can't \".push()\" in a \".onDisconnect\"\n  // var chatDataDisc = database.ref(\"/chat/\" + Date.now());\n\n  // Checks for current players, if theres a player one connected, then the user becomes player 2.\n  // If there is no player one, then the user becomes player 1\n  let ref = Firebase.database().ref('players');\n  let playerOneExists;\n  let playerTwoExists;\n  let {winner, opponentChoice, wins, losses, opponentName} = this.state;\n  const {name} = this.state;\n  ref.on('value', snapshot => {\n    const gameData = snapshot.val();\n    console.log('what is coming back for gamedata??', gameData);\n    playerOneExists = snapshot.child(1).exists();\n    playerTwoExists = snapshot.child(2).exists();\n\n    if (gameData && gameData[1] && gameData[1].name && gameData[2] && gameData[2].name) {\n      opponentName = gameData[1].name === name ? gameData[2].name : gameData[1].name;\n      this.setState({opponentName});\n    }\n\n    if (gameData && gameData[1] && gameData[1].choice && gameData[2] && gameData[2].choice) {\n      const playerOneChoice = gameData[1].choice;\n      const playerTwoChoice = gameData[2].choice;\n      if (playerOneChoice === 'paper' && playerTwoChoice === 'paper') {\n        winner = 'tie';\n      }\n      if (playerOneChoice === 'rock' && playerTwoChoice === 'rock') {\n        winner = 'tie';\n      }\n      if (playerOneChoice === 'scissors' && playerTwoChoice === 'scissors') {\n        winner = 'tie';\n      }\n      if (playerOneChoice === 'paper' && playerTwoChoice === 'rock') {\n        winner = gameData[1].name;\n      }\n      if (playerOneChoice === 'paper' && playerTwoChoice === 'scissors') {\n        winner = gameData[2].name;\n      }\n      if (playerOneChoice === 'rock' && playerTwoChoice === 'paper') {\n        winner = gameData[2].name;\n      }\n      if (playerOneChoice === 'rock' && playerTwoChoice === 'scissors') {\n        winner = gameData[1].name;\n      }\n      if (playerOneChoice === 'scissors' && playerTwoChoice === 'rock') {\n        winner = gameData[2].name;\n      }\n      if (playerOneChoice === 'scissors' && playerTwoChoice === 'paper') {\n        winner = gameData[1].name;\n      }\n      name === gameData[1].name ? opponentChoice = gameData[2].choice : opponentChoice = gameData[1].choice;\n      winner !== 'tie' ? (winner === name ? wins++ : losses++) : null;\n    }\n    \n    this.setState({playerOneExists, playerTwoExists, winner, opponentChoice, wins, losses});\n  });\n  if (this.state.currentPlayers < 2) {\n    let {player} = this.state;\n    if (playerOneExists && !winner) {\n      player = 2;\n      currentTurnRef.set(1);\n      this.setState({currentTurn: 1});\n    }\n    else {\n      player = 1;\n    }\n\n    // Creates key based on assigned player number\n    const playerRef = Firebase.database().ref('/players/' + player);\n    // Creates player object.\n    playerRef.set({\n      name: this.state.name,\n      wins: this.state.wins,\n      losses: this.state.losses,\n      choice: ''\n    });\n\n    // On disconnect remove this user's player object\n    playerRef.onDisconnect().remove();\n\n    // If a user disconnects, set the current turn to 'null' so the game does not continue\n    currentTurnRef.onDisconnect().remove();\n\n    // Send disconnect message to chat with Firebase server generated timestamp and id of '0' to denote system message\n    chatDisc.onDisconnect().set({\n      name: this.state.name,\n      time: Firebase.database.ServerValue.TIMESTAMP,\n      message: 'has disconnected.',\n      idNum: 0\n    });\n\n    this.setState({player});\n  }\n  else {\n    this.setState({error: 'Sorry, Game Full! Try Again Later!'});\n  }\n}\n\ncomponentDidMount() {\n  this.getChatData();\n  this.getGameData();\n}\n\nhandleShowMobileInstructions = () => {\n  this.state.showInstructions \n    ? this.setState({showInstructions: false}) \n    : this.setState({showInstructions: true});\n}\n\nhandleTextChange = (e) => {\n  const name = e.target.value;\n  this.setState({name});\n}\n\nsaveName = () => {\n  // call to db to save name goes here\n  this.setState({nameChosen: true});\n  this.gameStart();\n}\n\nhandleSelectChoice = (choice) => {\n  this.setState({choice});\n  const {name, player, wins, losses} = this.state;\n  console.log('name, player, wins, losses', name, player, wins, losses);\n  const playerRef = Firebase.database().ref('/players/' + player);\n  const currentTurnRef = Firebase.database().ref('turn');\n  playerRef.set({\n    name: name,\n    wins: wins,\n    losses: losses,\n    choice: choice\n  });\n  this.state.currentPlayerTurn === 1 ? currentTurnRef.set(2) : currentTurnRef.set(1);\n  this.state.currentPlayerTurn === 1 ? this.setState({currentPlayerTurn: 2}) : this.setState({currentPlayerTurn: 1});\n}\n\nrender() {\n  const { \n    winner, \n    name, \n    error, \n    currentPlayerTurn,\n    nameChosen, \n    choice,\n    player, \n    chatData, \n    playerOneExists, \n    playerTwoExists, \n    currentPlayers,\n    opponentChoice,\n    wins,\n    losses,\n    opponentName\n  } = this.state;\n  console.log('state:::', this.state);\n  return (\n    <div className=\"main\">\n      <div className='main-container'>\n        <h1 className='header'>Rock, Paper, Scissors</h1>\n        {/* <div className='infoIcon'>\n          <img \n            src={InfoIconCircle} \n            onClick={this.handleShowMobileInstructions}\n            width='20px'\n            height='20px'\n            alt='info-icon' />\n        </div> */}\n        <div className='inputWithSave'>\n          {nameChosen && player ? \n            (<h1 className='name-display'>Hi {name}, you are player {player}! {currentPlayers < 2 ? 'Waiting for player two to join...' : null} </h1>)\n            : (<div className='inputWithSave'>\n              <Input \n                name={name}\n                handleTextChange={this.handleTextChange}\n              />\n              {name ?\n                <button \n                  className='saveBtn' \n                  onClick={this.saveName}>\n                  Add my name!\n                </button> : null}\n            </div>)}\n        </div>\n        {!winner && playerOneExists && playerTwoExists ? <div>\n          {currentPlayerTurn === player ? <h3 style={{color: 'darkblue'}}>Your turn!</h3> \n            : <h3 style={{color: 'darkblue'}}>Waiting for {opponentName} to make their choice...</h3>}\n        </div> : null}\n        <div className='stats-box'>\n          <h3>Wins: {wins}</h3>\n          <h3>Losses: {losses}</h3>\n        </div>\n        <div>\n          <h3 style={{color: 'darkRed'}}>{error}</h3>\n        </div>\n        {winner ? <div className='results-box'>\n          <h1 style={{color: 'darkRed'}}>The winner is {winner}!</h1>\n          <div className='results-display'>\n            <div className='result'>\n              <span>{name} chose:</span>{choice === 'rock' ? <Rock display small /> : choice === 'scissors' ? <Scissors display small /> : choice === 'paper' ? <Paper display small /> : null}\n            </div>\n            <div className='result'>\n              <span>{opponentName} chose:</span>{opponentChoice === 'rock' ? <Rock display small /> : opponentChoice === 'scissors' ? <Scissors display small /> : opponentChoice === 'paper' ? <Paper display small /> : null}\n            </div>\n          </div>\n        </div> : null}\n        {!winner && playerOneExists && playerTwoExists ? <div className='gameboard'>\n          <div className='left-side'>\n            <Display \n              winner={winner}\n              player={1} \n              isTurn={!winner && currentPlayerTurn === 1 && player === 1} \n              handleSelect={this.handleSelectChoice}\n              choice={choice}\n              opponentChoice={player === 1 && opponentChoice ? opponentChoice : null} />\n          </div>\n          <div className='right-side'>\n            <Display \n              winner={winner}\n              player={2} \n              isTurn={!winner && currentPlayerTurn === 2 && player === 2} \n              handleSelect={this.handleSelectChoice}\n              choice={choice}\n              opponentChoice={player === 2 && opponentChoice ? opponentChoice : null} />\n          </div> \n        </div> : null}\n        {winner ?\n          <button \n            className='saveBtn' \n            // onClick={this.playAgain}\n            onClick={this.refresh}>\n                  Play again?\n          </button> : null}\n        <div>\n          <ChatBox\n            player={player}\n            name={name}\n            chatData={chatData}\n            firebase={Firebase} />\n        </div>\n      </div>\n      <h3>Version: {json.version}</h3>\n    </div>\n  );\n}\n}\n\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/main/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}